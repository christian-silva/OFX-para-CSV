/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dados_xml.FuncaoConvertedora;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Christian
 */
public class TelaConversora extends javax.swing.JFrame {

    /**
     * Creates new form telaConversora
     */
    private String origem;
    private String destino;

    public TelaConversora() {
        this.setIconImage(this.carregaIconeAplicacao(true));
        initComponents();

        FuncaoArrastaESolta();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoSelecionarOrigem = new javax.swing.JButton();
        textoOrigem = new javax.swing.JTextField();
        botaoConverter = new javax.swing.JButton();
        botaoSelecionarDestino = new javax.swing.JButton();
        textoDestino = new javax.swing.JTextField();
        barraMenu = new javax.swing.JMenuBar();
        itensSair = new javax.swing.JMenu();
        jMenuSair = new javax.swing.JMenuItem();
        itensSobre = new javax.swing.JMenu();
        jMenuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversor de OFX para CSV");

        botaoSelecionarOrigem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ofx_36p.png"))); // NOI18N
        botaoSelecionarOrigem.setText("Selecionar OFX ...");
        botaoSelecionarOrigem.setToolTipText("Função arrasta e solta habilitada");
        botaoSelecionarOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarOrigemActionPerformed(evt);
            }
        });

        textoOrigem.setEditable(false);

        botaoConverter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_send_black_24dp.png"))); // NOI18N
        botaoConverter.setText("Converter");
        botaoConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConverterActionPerformed(evt);
            }
        });

        botaoSelecionarDestino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/icons8-csv-24.png"))); // NOI18N
        botaoSelecionarDestino.setText("Selecionar pasta de destino ...");
        botaoSelecionarDestino.setPreferredSize(new java.awt.Dimension(165, 22));
        botaoSelecionarDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarDestinoActionPerformed(evt);
            }
        });

        textoDestino.setEditable(false);
        textoDestino.setToolTipText("Clique duplo para abrir o arquivo");
        textoDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textoDestinoMouseClicked(evt);
            }
        });

        itensSair.setText("Arquivo");

        jMenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_power_settings_new_black_24dp_1x.png"))); // NOI18N
        jMenuSair.setText("Sair");
        jMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSairActionPerformed(evt);
            }
        });
        itensSair.add(jMenuSair);

        barraMenu.add(itensSair);

        itensSobre.setText("Ajuda");

        jMenuSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_perm_contact_calendar_black_24dp_1x.png"))); // NOI18N
        jMenuSobre.setText("Sobre");
        jMenuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSobreActionPerformed(evt);
            }
        });
        itensSobre.add(jMenuSobre);

        barraMenu.add(itensSobre);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoSelecionarOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoSelecionarDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botaoConverter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoSelecionarOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoSelecionarDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoConverter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuSairActionPerformed

    private void jMenuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSobreActionPerformed
        Toolkit.getDefaultToolkit().beep();
        JOptionPane.showMessageDialog(this, "Autor: Christian Silva\nE-mail: christian.silva@lealsantos.com", "Autor do Software", WIDTH);

    }//GEN-LAST:event_jMenuSobreActionPerformed

    private void botaoSelecionarOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarOrigemActionPerformed
        JFileChooser abrir = new JFileChooser();

        String nomeUsuarioSistema = System.getProperty("user.name");

        File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
        if (novoDiretorio.exists()) {
            abrir.setCurrentDirectory(novoDiretorio);
        } else {
            novoDiretorio = new File("E:/Desktop/");
            abrir.setCurrentDirectory(novoDiretorio);
        }

        abrir.setCurrentDirectory(novoDiretorio);
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        /**
         * Mostrar apenas os arquivos .ofx
         */
        FileFilter filefilter = new FileNameExtensionFilter("Arquivo OFX", "ofx");
        abrir.setFileFilter(filefilter);

        int verificacao = abrir.showOpenDialog(this);
        if (verificacao == JFileChooser.APPROVE_OPTION) {
            // Mostra os labels
            String ofx = abrir.getSelectedFile().toString();
            this.origem = ofx;
            textoOrigem.setText(abrir.getSelectedFile().toString());

            this.destino = this.origem.replaceAll(".ofx", ".csv");
            textoDestino.setText(this.destino);
        }
    }//GEN-LAST:event_botaoSelecionarOrigemActionPerformed

    private void botaoConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConverterActionPerformed

        if (origem != null) {
            //Faz a transformação do OFX para CSV
            ArrayList<String> arquivoManipulado = FuncaoConvertedora.converter(this.origem);
//            for (String string : arquivoManipulado) {
//                System.out.println("> " + string);
//            }

            String dir = null;
            Charset charset = null;
            charset = StandardCharsets.ISO_8859_1;
            //Seta o destino do arquivo
            Path path = Paths.get(this.destino);

            try (BufferedWriter w = Files.newBufferedWriter(path, charset)) {

                for (String linhaDoArquivo : arquivoManipulado) {
                    //System.out.println("Gravando: " + linhaDoArquivo);
                    w.write(linhaDoArquivo + "\n");
                }

                Icon icon1 = icon1 = new ImageIcon(this.getClass().getResource("/icones/ic_save_black_24dp_1x.png"));
                JOptionPane.showMessageDialog(this, "       CSV do OFX salvo com sucesso", "CSV", JOptionPane.PLAIN_MESSAGE, icon1);

            } catch (IOException ex) {
                System.err.println("Erro ao gerar o arquivo CSV\n" + ex.getMessage());
                JOptionPane.showMessageDialog(this, "Não foi possível gerar o arquivo CSV\n" + ex.getMessage(), "Erro na geração do arquivo .csv", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione a Origem do OFX", "Erro na seleção", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_botaoConverterActionPerformed

    private void botaoSelecionarDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarDestinoActionPerformed
        /**
         * Responsável por abrir uma janela
         */
        if (origem != null) {
            String nomeUsuarioSistema = System.getProperty("user.name");
            JFileChooser abrir = new JFileChooser();
            File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
            if (novoDiretorio.exists()) {
                abrir.setCurrentDirectory(novoDiretorio);
            } else {
                novoDiretorio = new File("E:/Desktop/");
                abrir.setCurrentDirectory(novoDiretorio);
            }

            abrir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int verificacao = abrir.showOpenDialog(this);
            if (verificacao == JFileChooser.APPROVE_OPTION) {

                String nomeArquivo = this.origem.substring(this.origem.lastIndexOf("\\") + 1, this.origem.length());
                nomeArquivo = nomeArquivo.replaceAll(".ofx", ".csv");

                this.destino = abrir.getSelectedFile().toString();
                textoDestino.setText(this.destino + "\\" + nomeArquivo);

            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione a Origem do OFX", "Erro na seleção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botaoSelecionarDestinoActionPerformed

    private void textoDestinoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoDestinoMouseClicked
        if (this.destino != null) {
            if (evt.getClickCount() == 2) {
                try {
                    Path path = Paths.get(this.destino);
                    if (path.toFile().exists()) {
                        java.awt.Desktop.getDesktop().open(path.toFile());
                    }
                } catch (IOException ex) {
                    Logger.getLogger(TelaConversora.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_textoDestinoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaConversora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaConversora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaConversora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaConversora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaConversora().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botaoConverter;
    private javax.swing.JButton botaoSelecionarDestino;
    private javax.swing.JButton botaoSelecionarOrigem;
    private javax.swing.JMenu itensSair;
    private javax.swing.JMenu itensSobre;
    private javax.swing.JMenuItem jMenuSair;
    private javax.swing.JMenuItem jMenuSobre;
    private javax.swing.JTextField textoDestino;
    private javax.swing.JTextField textoOrigem;
    // End of variables declaration//GEN-END:variables

    public Image carregaIconeAplicacao(boolean carregar) {
        // coloca uma figura na barra de título da janela

        Image imageRetorno = null;
        if (carregar) {
            try {
                URL url = this.getClass().getResource("/icones/ofxicone.png");
                Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
                imageRetorno = imagemTitulo;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
                System.err.println("Erro ao carregar icone da aplicação");;
            }
        }
        return imageRetorno;
    }

    private void FuncaoArrastaESolta() {
        new DropTarget(botaoSelecionarOrigem, new DropTargetListener() {
            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {

                // Faz a função de arrasta e solta -github
                dtde.acceptDrop(DnDConstants.ACTION_COPY);
                Transferable t = dtde.getTransferable();

                DataFlavor[] df = t.getTransferDataFlavors();
                String path = null;
                for (DataFlavor f : df) {
                    if (f.isFlavorJavaFileListType()) {
                        try {
                            path = t.getTransferData(f).toString();
                            path = path.replace("[", "").replace("]", "");
                            System.out.println("path : " + path);
                            // Mostra os labels
                            String ofx = path;
                            setOrigem(ofx);
                            textoOrigem.setText(ofx);
                            setDestino(getOrigem().replaceAll(".ofx", ".csv"));
                            textoDestino.setText(getDestino());

                        } catch (UnsupportedFlavorException | IOException ex) {
                            Logger.getLogger(TelaConversora.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            }
        });
    }

    public String getOrigem() {
        return origem;
    }

    public void setOrigem(String origem) {
        this.origem = origem;
    }

    public String getDestino() {
        return destino;
    }

    public void setDestino(String destino) {
        this.destino = destino;
    }

}
